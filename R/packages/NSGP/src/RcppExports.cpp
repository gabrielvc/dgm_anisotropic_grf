// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// coefsChebApprox
Eigen::VectorXd coefsChebApprox(Rcpp::Function h_, int M, double a, double b, int verbose);
RcppExport SEXP _NSGP_coefsChebApprox(SEXP h_SEXP, SEXP MSEXP, SEXP aSEXP, SEXP bSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::Function >::type h_(h_SEXP);
    Rcpp::traits::input_parameter< int >::type M(MSEXP);
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    Rcpp::traits::input_parameter< int >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(coefsChebApprox(h_, M, a, b, verbose));
    return rcpp_result_gen;
END_RCPP
}
// prodChebDecompVec
Eigen::MatrixXd prodChebDecompVec(Eigen::SparseMatrix<double> S, Eigen::VectorXd Coefs, double a, double b, Eigen::MatrixXd V);
RcppExport SEXP _NSGP_prodChebDecompVec(SEXP SSEXP, SEXP CoefsSEXP, SEXP aSEXP, SEXP bSEXP, SEXP VSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::SparseMatrix<double> >::type S(SSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type Coefs(CoefsSEXP);
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type V(VSEXP);
    rcpp_result_gen = Rcpp::wrap(prodChebDecompVec(S, Coefs, a, b, V));
    return rcpp_result_gen;
END_RCPP
}
// evalCheb
Eigen::VectorXd evalCheb(Eigen::VectorXd x, int n, double a, double b);
RcppExport SEXP _NSGP_evalCheb(SEXP xSEXP, SEXP nSEXP, SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(evalCheb(x, n, a, b));
    return rcpp_result_gen;
END_RCPP
}
// evalChebDecompPts
Eigen::ArrayXd evalChebDecompPts(Eigen::ArrayXd x, Eigen::ArrayXd Coefs, double a, double b);
RcppExport SEXP _NSGP_evalChebDecompPts(SEXP xSEXP, SEXP CoefsSEXP, SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::ArrayXd >::type x(xSEXP);
    Rcpp::traits::input_parameter< Eigen::ArrayXd >::type Coefs(CoefsSEXP);
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(evalChebDecompPts(x, Coefs, a, b));
    return rcpp_result_gen;
END_RCPP
}
// evalChebDecompMat
Eigen::SparseMatrix<double> evalChebDecompMat(Eigen::SparseMatrix<double> S, Eigen::VectorXd Coefs, double a, double b);
RcppExport SEXP _NSGP_evalChebDecompMat(SEXP SSEXP, SEXP CoefsSEXP, SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::SparseMatrix<double> >::type S(SSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type Coefs(CoefsSEXP);
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(evalChebDecompMat(S, Coefs, a, b));
    return rcpp_result_gen;
END_RCPP
}
// matFEM2d
Rcpp::List matFEM2d(Eigen::ArrayXXd& nodeMat, Eigen::ArrayXXi& triMat, Eigen::ArrayXXd& triMetricMat, Rcpp::Nullable<Rcpp::NumericVector > triPotCoeffs, Rcpp::Nullable<Rcpp::NumericMatrix > triDiffCoeffs, bool massLumping);
RcppExport SEXP _NSGP_matFEM2d(SEXP nodeMatSEXP, SEXP triMatSEXP, SEXP triMetricMatSEXP, SEXP triPotCoeffsSEXP, SEXP triDiffCoeffsSEXP, SEXP massLumpingSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::ArrayXXd& >::type nodeMat(nodeMatSEXP);
    Rcpp::traits::input_parameter< Eigen::ArrayXXi& >::type triMat(triMatSEXP);
    Rcpp::traits::input_parameter< Eigen::ArrayXXd& >::type triMetricMat(triMetricMatSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<Rcpp::NumericVector > >::type triPotCoeffs(triPotCoeffsSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<Rcpp::NumericMatrix > >::type triDiffCoeffs(triDiffCoeffsSEXP);
    Rcpp::traits::input_parameter< bool >::type massLumping(massLumpingSEXP);
    rcpp_result_gen = Rcpp::wrap(matFEM2d(nodeMat, triMat, triMetricMat, triPotCoeffs, triDiffCoeffs, massLumping));
    return rcpp_result_gen;
END_RCPP
}
// matFEM1d
Rcpp::List matFEM1d(Eigen::ArrayXXd& nodeMat, Eigen::ArrayXXi& triMat, Eigen::ArrayXXd& triMetricMat, Rcpp::Nullable<Rcpp::NumericVector > triPotCoeffs, Rcpp::Nullable<Rcpp::NumericMatrix > triDiffCoeffs, bool massLumping);
RcppExport SEXP _NSGP_matFEM1d(SEXP nodeMatSEXP, SEXP triMatSEXP, SEXP triMetricMatSEXP, SEXP triPotCoeffsSEXP, SEXP triDiffCoeffsSEXP, SEXP massLumpingSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::ArrayXXd& >::type nodeMat(nodeMatSEXP);
    Rcpp::traits::input_parameter< Eigen::ArrayXXi& >::type triMat(triMatSEXP);
    Rcpp::traits::input_parameter< Eigen::ArrayXXd& >::type triMetricMat(triMetricMatSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<Rcpp::NumericVector > >::type triPotCoeffs(triPotCoeffsSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<Rcpp::NumericMatrix > >::type triDiffCoeffs(triDiffCoeffsSEXP);
    Rcpp::traits::input_parameter< bool >::type massLumping(massLumpingSEXP);
    rcpp_result_gen = Rcpp::wrap(matFEM1d(nodeMat, triMat, triMetricMat, triPotCoeffs, triDiffCoeffs, massLumping));
    return rcpp_result_gen;
END_RCPP
}
// triMetricCompute2d
Eigen::ArrayXXd triMetricCompute2d(Eigen::ArrayXXd& nodeMat, Eigen::ArrayXXi& triMat, Eigen::ArrayXXd& knots, Eigen::ArrayXd& val_f, Eigen::ArrayXd val_rho1, Eigen::ArrayXd val_rho2, int m, int p, double lambda, double rho_min, double rho_max);
RcppExport SEXP _NSGP_triMetricCompute2d(SEXP nodeMatSEXP, SEXP triMatSEXP, SEXP knotsSEXP, SEXP val_fSEXP, SEXP val_rho1SEXP, SEXP val_rho2SEXP, SEXP mSEXP, SEXP pSEXP, SEXP lambdaSEXP, SEXP rho_minSEXP, SEXP rho_maxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::ArrayXXd& >::type nodeMat(nodeMatSEXP);
    Rcpp::traits::input_parameter< Eigen::ArrayXXi& >::type triMat(triMatSEXP);
    Rcpp::traits::input_parameter< Eigen::ArrayXXd& >::type knots(knotsSEXP);
    Rcpp::traits::input_parameter< Eigen::ArrayXd& >::type val_f(val_fSEXP);
    Rcpp::traits::input_parameter< Eigen::ArrayXd >::type val_rho1(val_rho1SEXP);
    Rcpp::traits::input_parameter< Eigen::ArrayXd >::type val_rho2(val_rho2SEXP);
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< double >::type rho_min(rho_minSEXP);
    Rcpp::traits::input_parameter< double >::type rho_max(rho_maxSEXP);
    rcpp_result_gen = Rcpp::wrap(triMetricCompute2d(nodeMat, triMat, knots, val_f, val_rho1, val_rho2, m, p, lambda, rho_min, rho_max));
    return rcpp_result_gen;
END_RCPP
}
// loglikelihood
double loglikelihood(Eigen::ArrayXd& theta, Eigen::VectorXd& Y, Eigen::SparseMatrix<double>& A, Eigen::ArrayXXd& nodeMat, Eigen::ArrayXXi& triMat, Eigen::ArrayXXd& knots, int m, int p, double lambda, double rho_min);
RcppExport SEXP _NSGP_loglikelihood(SEXP thetaSEXP, SEXP YSEXP, SEXP ASEXP, SEXP nodeMatSEXP, SEXP triMatSEXP, SEXP knotsSEXP, SEXP mSEXP, SEXP pSEXP, SEXP lambdaSEXP, SEXP rho_minSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::ArrayXd& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< Eigen::SparseMatrix<double>& >::type A(ASEXP);
    Rcpp::traits::input_parameter< Eigen::ArrayXXd& >::type nodeMat(nodeMatSEXP);
    Rcpp::traits::input_parameter< Eigen::ArrayXXi& >::type triMat(triMatSEXP);
    Rcpp::traits::input_parameter< Eigen::ArrayXXd& >::type knots(knotsSEXP);
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< double >::type rho_min(rho_minSEXP);
    rcpp_result_gen = Rcpp::wrap(loglikelihood(theta, Y, A, nodeMat, triMat, knots, m, p, lambda, rho_min));
    return rcpp_result_gen;
END_RCPP
}
// KrigNodes
Eigen::VectorXd KrigNodes(Eigen::ArrayXd& theta, Eigen::VectorXd& Y, Eigen::SparseMatrix<double>& A, Eigen::ArrayXXd& nodeMat, Eigen::ArrayXXi& triMat, Eigen::ArrayXXd& knots, int m, int p, double lambda, double rho_min);
RcppExport SEXP _NSGP_KrigNodes(SEXP thetaSEXP, SEXP YSEXP, SEXP ASEXP, SEXP nodeMatSEXP, SEXP triMatSEXP, SEXP knotsSEXP, SEXP mSEXP, SEXP pSEXP, SEXP lambdaSEXP, SEXP rho_minSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::ArrayXd& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< Eigen::SparseMatrix<double>& >::type A(ASEXP);
    Rcpp::traits::input_parameter< Eigen::ArrayXXd& >::type nodeMat(nodeMatSEXP);
    Rcpp::traits::input_parameter< Eigen::ArrayXXi& >::type triMat(triMatSEXP);
    Rcpp::traits::input_parameter< Eigen::ArrayXXd& >::type knots(knotsSEXP);
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< double >::type rho_min(rho_minSEXP);
    rcpp_result_gen = Rcpp::wrap(KrigNodes(theta, Y, A, nodeMat, triMat, knots, m, p, lambda, rho_min));
    return rcpp_result_gen;
END_RCPP
}
// NCondSampleNodes
Eigen::MatrixXd NCondSampleNodes(Eigen::ArrayXd& theta, Eigen::MatrixXd& W, Eigen::ArrayXXd& nodeMat, Eigen::ArrayXXi& triMat, Eigen::ArrayXXd& knots, int m, int p, double lambda, double rho_min);
RcppExport SEXP _NSGP_NCondSampleNodes(SEXP thetaSEXP, SEXP WSEXP, SEXP nodeMatSEXP, SEXP triMatSEXP, SEXP knotsSEXP, SEXP mSEXP, SEXP pSEXP, SEXP lambdaSEXP, SEXP rho_minSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::ArrayXd& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type W(WSEXP);
    Rcpp::traits::input_parameter< Eigen::ArrayXXd& >::type nodeMat(nodeMatSEXP);
    Rcpp::traits::input_parameter< Eigen::ArrayXXi& >::type triMat(triMatSEXP);
    Rcpp::traits::input_parameter< Eigen::ArrayXXd& >::type knots(knotsSEXP);
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< double >::type rho_min(rho_minSEXP);
    rcpp_result_gen = Rcpp::wrap(NCondSampleNodes(theta, W, nodeMat, triMat, knots, m, p, lambda, rho_min));
    return rcpp_result_gen;
END_RCPP
}
// CondSampleNodes
Eigen::MatrixXd CondSampleNodes(Eigen::ArrayXd& theta, Eigen::VectorXd& Y, Eigen::SparseMatrix<double>& A, Eigen::MatrixXd& W, Eigen::MatrixXd& eps, Eigen::ArrayXXd& nodeMat, Eigen::ArrayXXi& triMat, Eigen::ArrayXXd& knots, int m, int p, double lambda, double rho_min);
RcppExport SEXP _NSGP_CondSampleNodes(SEXP thetaSEXP, SEXP YSEXP, SEXP ASEXP, SEXP WSEXP, SEXP epsSEXP, SEXP nodeMatSEXP, SEXP triMatSEXP, SEXP knotsSEXP, SEXP mSEXP, SEXP pSEXP, SEXP lambdaSEXP, SEXP rho_minSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::ArrayXd& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< Eigen::SparseMatrix<double>& >::type A(ASEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type W(WSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type eps(epsSEXP);
    Rcpp::traits::input_parameter< Eigen::ArrayXXd& >::type nodeMat(nodeMatSEXP);
    Rcpp::traits::input_parameter< Eigen::ArrayXXi& >::type triMat(triMatSEXP);
    Rcpp::traits::input_parameter< Eigen::ArrayXXd& >::type knots(knotsSEXP);
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< double >::type rho_min(rho_minSEXP);
    rcpp_result_gen = Rcpp::wrap(CondSampleNodes(theta, Y, A, W, eps, nodeMat, triMat, knots, m, p, lambda, rho_min));
    return rcpp_result_gen;
END_RCPP
}
// TPspline
Rcpp::List TPspline(Eigen::ArrayXXd knots, Eigen::ArrayXd val, int m, int p, double lambda);
RcppExport SEXP _NSGP_TPspline(SEXP knotsSEXP, SEXP valSEXP, SEXP mSEXP, SEXP pSEXP, SEXP lambdaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::ArrayXXd >::type knots(knotsSEXP);
    Rcpp::traits::input_parameter< Eigen::ArrayXd >::type val(valSEXP);
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    rcpp_result_gen = Rcpp::wrap(TPspline(knots, val, m, p, lambda));
    return rcpp_result_gen;
END_RCPP
}
// evalTPSpline
Eigen::ArrayXd evalTPSpline(Eigen::ArrayXXd pts, Eigen::ArrayXXd knots, Eigen::ArrayXd val, int m, int p, double lambda);
RcppExport SEXP _NSGP_evalTPSpline(SEXP ptsSEXP, SEXP knotsSEXP, SEXP valSEXP, SEXP mSEXP, SEXP pSEXP, SEXP lambdaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::ArrayXXd >::type pts(ptsSEXP);
    Rcpp::traits::input_parameter< Eigen::ArrayXXd >::type knots(knotsSEXP);
    Rcpp::traits::input_parameter< Eigen::ArrayXd >::type val(valSEXP);
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    rcpp_result_gen = Rcpp::wrap(evalTPSpline(pts, knots, val, m, p, lambda));
    return rcpp_result_gen;
END_RCPP
}
// evalGradTPSpline
Eigen::ArrayXXd evalGradTPSpline(Eigen::ArrayXXd pts, Eigen::ArrayXXd knots, Eigen::ArrayXd val, int m, int p, double lambda);
RcppExport SEXP _NSGP_evalGradTPSpline(SEXP ptsSEXP, SEXP knotsSEXP, SEXP valSEXP, SEXP mSEXP, SEXP pSEXP, SEXP lambdaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::ArrayXXd >::type pts(ptsSEXP);
    Rcpp::traits::input_parameter< Eigen::ArrayXXd >::type knots(knotsSEXP);
    Rcpp::traits::input_parameter< Eigen::ArrayXd >::type val(valSEXP);
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    rcpp_result_gen = Rcpp::wrap(evalGradTPSpline(pts, knots, val, m, p, lambda));
    return rcpp_result_gen;
END_RCPP
}
// matCovarTPS
Eigen::ArrayXXd matCovarTPS(Eigen::ArrayXXd& xcoord, Eigen::ArrayXXd& knots, int m, int p);
RcppExport SEXP _NSGP_matCovarTPS(SEXP xcoordSEXP, SEXP knotsSEXP, SEXP mSEXP, SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::ArrayXXd& >::type xcoord(xcoordSEXP);
    Rcpp::traits::input_parameter< Eigen::ArrayXXd& >::type knots(knotsSEXP);
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(matCovarTPS(xcoord, knots, m, p));
    return rcpp_result_gen;
END_RCPP
}
// getTPSvalMat
Eigen::MatrixXd getTPSvalMat(Eigen::ArrayXXd& knots, int m, int p, double lambda);
RcppExport SEXP _NSGP_getTPSvalMat(SEXP knotsSEXP, SEXP mSEXP, SEXP pSEXP, SEXP lambdaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::ArrayXXd& >::type knots(knotsSEXP);
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    rcpp_result_gen = Rcpp::wrap(getTPSvalMat(knots, m, p, lambda));
    return rcpp_result_gen;
END_RCPP
}
// argSort
std::vector<int> argSort(const Eigen::ArrayXd& array);
RcppExport SEXP _NSGP_argSort(SEXP arraySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::ArrayXd& >::type array(arraySEXP);
    rcpp_result_gen = Rcpp::wrap(argSort(array));
    return rcpp_result_gen;
END_RCPP
}
// lgt
Eigen::ArrayXd lgt(Eigen::ArrayXd& x, double rho_min, double rho_max);
RcppExport SEXP _NSGP_lgt(SEXP xSEXP, SEXP rho_minSEXP, SEXP rho_maxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::ArrayXd& >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type rho_min(rho_minSEXP);
    Rcpp::traits::input_parameter< double >::type rho_max(rho_maxSEXP);
    rcpp_result_gen = Rcpp::wrap(lgt(x, rho_min, rho_max));
    return rcpp_result_gen;
END_RCPP
}
// lgtInv
Eigen::ArrayXd lgtInv(Eigen::ArrayXd& x, double rho_min, double rho_max);
RcppExport SEXP _NSGP_lgtInv(SEXP xSEXP, SEXP rho_minSEXP, SEXP rho_maxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::ArrayXd& >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type rho_min(rho_minSEXP);
    Rcpp::traits::input_parameter< double >::type rho_max(rho_maxSEXP);
    rcpp_result_gen = Rcpp::wrap(lgtInv(x, rho_min, rho_max));
    return rcpp_result_gen;
END_RCPP
}
// sphBarCoordBT
Eigen::MatrixXd sphBarCoordBT(Eigen::MatrixXd& sphPts, Eigen::MatrixXd& nodeMat, Eigen::ArrayXXi& triMat, Eigen::MatrixXd& triBar);
RcppExport SEXP _NSGP_sphBarCoordBT(SEXP sphPtsSEXP, SEXP nodeMatSEXP, SEXP triMatSEXP, SEXP triBarSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type sphPts(sphPtsSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type nodeMat(nodeMatSEXP);
    Rcpp::traits::input_parameter< Eigen::ArrayXXi& >::type triMat(triMatSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type triBar(triBarSEXP);
    rcpp_result_gen = Rcpp::wrap(sphBarCoordBT(sphPts, nodeMat, triMat, triBar));
    return rcpp_result_gen;
END_RCPP
}
// BT
std::vector<int> BT(Eigen::MatrixXd& triBar, Eigen::VectorXd query);
RcppExport SEXP _NSGP_BT(SEXP triBarSEXP, SEXP querySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type triBar(triBarSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type query(querySEXP);
    rcpp_result_gen = Rcpp::wrap(BT(triBar, query));
    return rcpp_result_gen;
END_RCPP
}
// main
int main();
RcppExport SEXP _NSGP_main() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(main());
    return rcpp_result_gen;
END_RCPP
}
// simChebChol
Eigen::MatrixXd simChebChol(Eigen::SparseMatrix<double> C, Eigen::SparseMatrix<double> R, Eigen::VectorXd Coefs, double a, double b, Eigen::MatrixXd V);
RcppExport SEXP _NSGP_simChebChol(SEXP CSEXP, SEXP RSEXP, SEXP CoefsSEXP, SEXP aSEXP, SEXP bSEXP, SEXP VSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::SparseMatrix<double> >::type C(CSEXP);
    Rcpp::traits::input_parameter< Eigen::SparseMatrix<double> >::type R(RSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type Coefs(CoefsSEXP);
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type V(VSEXP);
    rcpp_result_gen = Rcpp::wrap(simChebChol(C, R, Coefs, a, b, V));
    return rcpp_result_gen;
END_RCPP
}
// projectNoise
Eigen::MatrixXd projectNoise(Eigen::SparseMatrix<double> C_fine, Eigen::SparseMatrix<double> C_coarse, Eigen::SparseMatrix<double> Amat, Eigen::MatrixXd W);
RcppExport SEXP _NSGP_projectNoise(SEXP C_fineSEXP, SEXP C_coarseSEXP, SEXP AmatSEXP, SEXP WSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::SparseMatrix<double> >::type C_fine(C_fineSEXP);
    Rcpp::traits::input_parameter< Eigen::SparseMatrix<double> >::type C_coarse(C_coarseSEXP);
    Rcpp::traits::input_parameter< Eigen::SparseMatrix<double> >::type Amat(AmatSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type W(WSEXP);
    rcpp_result_gen = Rcpp::wrap(projectNoise(C_fine, C_coarse, Amat, W));
    return rcpp_result_gen;
END_RCPP
}
// maternCov
Eigen::ArrayXd maternCov(Eigen::ArrayXd theta, Eigen::ArrayXd rho);
RcppExport SEXP _NSGP_maternCov(SEXP thetaSEXP, SEXP rhoSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::ArrayXd >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< Eigen::ArrayXd >::type rho(rhoSEXP);
    rcpp_result_gen = Rcpp::wrap(maternCov(theta, rho));
    return rcpp_result_gen;
END_RCPP
}
// covMatMatern
Eigen::MatrixXd covMatMatern(Eigen::ArrayXd& theta, Eigen::ArrayXXd& Coord1, Eigen::ArrayXXd& Coord2);
RcppExport SEXP _NSGP_covMatMatern(SEXP thetaSEXP, SEXP Coord1SEXP, SEXP Coord2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::ArrayXd& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< Eigen::ArrayXXd& >::type Coord1(Coord1SEXP);
    Rcpp::traits::input_parameter< Eigen::ArrayXXd& >::type Coord2(Coord2SEXP);
    rcpp_result_gen = Rcpp::wrap(covMatMatern(theta, Coord1, Coord2));
    return rcpp_result_gen;
END_RCPP
}
// loglikStat
double loglikStat(Eigen::ArrayXd& theta, Eigen::VectorXd& Yobs, Eigen::ArrayXXd& obsCoord, double tau2);
RcppExport SEXP _NSGP_loglikStat(SEXP thetaSEXP, SEXP YobsSEXP, SEXP obsCoordSEXP, SEXP tau2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::ArrayXd& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type Yobs(YobsSEXP);
    Rcpp::traits::input_parameter< Eigen::ArrayXXd& >::type obsCoord(obsCoordSEXP);
    Rcpp::traits::input_parameter< double >::type tau2(tau2SEXP);
    rcpp_result_gen = Rcpp::wrap(loglikStat(theta, Yobs, obsCoord, tau2));
    return rcpp_result_gen;
END_RCPP
}
// KrigStat
Eigen::VectorXd KrigStat(Eigen::ArrayXXd& tarCoord, Eigen::ArrayXd& theta, Eigen::VectorXd& Yobs, Eigen::ArrayXXd& obsCoord, double tau2);
RcppExport SEXP _NSGP_KrigStat(SEXP tarCoordSEXP, SEXP thetaSEXP, SEXP YobsSEXP, SEXP obsCoordSEXP, SEXP tau2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::ArrayXXd& >::type tarCoord(tarCoordSEXP);
    Rcpp::traits::input_parameter< Eigen::ArrayXd& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type Yobs(YobsSEXP);
    Rcpp::traits::input_parameter< Eigen::ArrayXXd& >::type obsCoord(obsCoordSEXP);
    Rcpp::traits::input_parameter< double >::type tau2(tau2SEXP);
    rcpp_result_gen = Rcpp::wrap(KrigStat(tarCoord, theta, Yobs, obsCoord, tau2));
    return rcpp_result_gen;
END_RCPP
}
// KrigGaniso
Eigen::VectorXd KrigGaniso(Eigen::ArrayXXd& tarCoord, Eigen::ArrayXd& theta, Eigen::VectorXd& Yobs, Eigen::ArrayXXd& obsCoord, double tau2);
RcppExport SEXP _NSGP_KrigGaniso(SEXP tarCoordSEXP, SEXP thetaSEXP, SEXP YobsSEXP, SEXP obsCoordSEXP, SEXP tau2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::ArrayXXd& >::type tarCoord(tarCoordSEXP);
    Rcpp::traits::input_parameter< Eigen::ArrayXd& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type Yobs(YobsSEXP);
    Rcpp::traits::input_parameter< Eigen::ArrayXXd& >::type obsCoord(obsCoordSEXP);
    Rcpp::traits::input_parameter< double >::type tau2(tau2SEXP);
    rcpp_result_gen = Rcpp::wrap(KrigGaniso(tarCoord, theta, Yobs, obsCoord, tau2));
    return rcpp_result_gen;
END_RCPP
}
// NCondSampleStat
Eigen::MatrixXd NCondSampleStat(Eigen::ArrayXXd& tarCoord, Eigen::ArrayXd& theta, Eigen::MatrixXd& W);
RcppExport SEXP _NSGP_NCondSampleStat(SEXP tarCoordSEXP, SEXP thetaSEXP, SEXP WSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::ArrayXXd& >::type tarCoord(tarCoordSEXP);
    Rcpp::traits::input_parameter< Eigen::ArrayXd& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type W(WSEXP);
    rcpp_result_gen = Rcpp::wrap(NCondSampleStat(tarCoord, theta, W));
    return rcpp_result_gen;
END_RCPP
}
// CondSampleStat
Eigen::MatrixXd CondSampleStat(Eigen::ArrayXXd tarCoord, Eigen::ArrayXd& theta, Eigen::VectorXd& Yobs, Eigen::ArrayXXd obsCoord, Eigen::MatrixXd& W, Eigen::MatrixXd& eps, double tau2);
RcppExport SEXP _NSGP_CondSampleStat(SEXP tarCoordSEXP, SEXP thetaSEXP, SEXP YobsSEXP, SEXP obsCoordSEXP, SEXP WSEXP, SEXP epsSEXP, SEXP tau2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::ArrayXXd >::type tarCoord(tarCoordSEXP);
    Rcpp::traits::input_parameter< Eigen::ArrayXd& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type Yobs(YobsSEXP);
    Rcpp::traits::input_parameter< Eigen::ArrayXXd >::type obsCoord(obsCoordSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type W(WSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type eps(epsSEXP);
    Rcpp::traits::input_parameter< double >::type tau2(tau2SEXP);
    rcpp_result_gen = Rcpp::wrap(CondSampleStat(tarCoord, theta, Yobs, obsCoord, W, eps, tau2));
    return rcpp_result_gen;
END_RCPP
}
// loglikGAniso
double loglikGAniso(Eigen::ArrayXd& theta, Eigen::VectorXd& Yobs, Eigen::ArrayXXd& obsCoord, double tau2);
RcppExport SEXP _NSGP_loglikGAniso(SEXP thetaSEXP, SEXP YobsSEXP, SEXP obsCoordSEXP, SEXP tau2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::ArrayXd& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type Yobs(YobsSEXP);
    Rcpp::traits::input_parameter< Eigen::ArrayXXd& >::type obsCoord(obsCoordSEXP);
    Rcpp::traits::input_parameter< double >::type tau2(tau2SEXP);
    rcpp_result_gen = Rcpp::wrap(loglikGAniso(theta, Yobs, obsCoord, tau2));
    return rcpp_result_gen;
END_RCPP
}
// logPostGAniso
double logPostGAniso(Eigen::ArrayXd& theta, Eigen::VectorXd& Yobs, Eigen::ArrayXXd& obsCoord, double tau2);
RcppExport SEXP _NSGP_logPostGAniso(SEXP thetaSEXP, SEXP YobsSEXP, SEXP obsCoordSEXP, SEXP tau2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::ArrayXd& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type Yobs(YobsSEXP);
    Rcpp::traits::input_parameter< Eigen::ArrayXXd& >::type obsCoord(obsCoordSEXP);
    Rcpp::traits::input_parameter< double >::type tau2(tau2SEXP);
    rcpp_result_gen = Rcpp::wrap(logPostGAniso(theta, Yobs, obsCoord, tau2));
    return rcpp_result_gen;
END_RCPP
}
// RW_MCMC
Eigen::ArrayXXd RW_MCMC(Eigen::ArrayXd theta_init, Eigen::VectorXd& Yobs, Eigen::ArrayXXd& obsCoord, double tau2, int nbIter, int Thinning, Eigen::ArrayXd stdVec);
RcppExport SEXP _NSGP_RW_MCMC(SEXP theta_initSEXP, SEXP YobsSEXP, SEXP obsCoordSEXP, SEXP tau2SEXP, SEXP nbIterSEXP, SEXP ThinningSEXP, SEXP stdVecSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::ArrayXd >::type theta_init(theta_initSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type Yobs(YobsSEXP);
    Rcpp::traits::input_parameter< Eigen::ArrayXXd& >::type obsCoord(obsCoordSEXP);
    Rcpp::traits::input_parameter< double >::type tau2(tau2SEXP);
    Rcpp::traits::input_parameter< int >::type nbIter(nbIterSEXP);
    Rcpp::traits::input_parameter< int >::type Thinning(ThinningSEXP);
    Rcpp::traits::input_parameter< Eigen::ArrayXd >::type stdVec(stdVecSEXP);
    rcpp_result_gen = Rcpp::wrap(RW_MCMC(theta_init, Yobs, obsCoord, tau2, nbIter, Thinning, stdVec));
    return rcpp_result_gen;
END_RCPP
}
// rayTriangleIntersect
Eigen::VectorXd rayTriangleIntersect(Eigen::VectorXd dir, Eigen::VectorXd v0, Eigen::VectorXd v1, Eigen::VectorXd v2);
RcppExport SEXP _NSGP_rayTriangleIntersect(SEXP dirSEXP, SEXP v0SEXP, SEXP v1SEXP, SEXP v2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type dir(dirSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type v0(v0SEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type v1(v1SEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type v2(v2SEXP);
    rcpp_result_gen = Rcpp::wrap(rayTriangleIntersect(dir, v0, v1, v2));
    return rcpp_result_gen;
END_RCPP
}
// sphBarCoord
Eigen::MatrixXd sphBarCoord(Eigen::MatrixXd& sphPts, Eigen::MatrixXd& nodeMat, Eigen::ArrayXXi& triMat);
RcppExport SEXP _NSGP_sphBarCoord(SEXP sphPtsSEXP, SEXP nodeMatSEXP, SEXP triMatSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type sphPts(sphPtsSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type nodeMat(nodeMatSEXP);
    Rcpp::traits::input_parameter< Eigen::ArrayXXi& >::type triMat(triMatSEXP);
    rcpp_result_gen = Rcpp::wrap(sphBarCoord(sphPts, nodeMat, triMat));
    return rcpp_result_gen;
END_RCPP
}
// sphBarCoordFast
Eigen::MatrixXd sphBarCoordFast(Eigen::MatrixXd& sphPts, Eigen::MatrixXd& nodeMat, Eigen::ArrayXXi& triMat, Eigen::ArrayXXd& triBar);
RcppExport SEXP _NSGP_sphBarCoordFast(SEXP sphPtsSEXP, SEXP nodeMatSEXP, SEXP triMatSEXP, SEXP triBarSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type sphPts(sphPtsSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type nodeMat(nodeMatSEXP);
    Rcpp::traits::input_parameter< Eigen::ArrayXXi& >::type triMat(triMatSEXP);
    Rcpp::traits::input_parameter< Eigen::ArrayXXd& >::type triBar(triBarSEXP);
    rcpp_result_gen = Rcpp::wrap(sphBarCoordFast(sphPts, nodeMat, triMat, triBar));
    return rcpp_result_gen;
END_RCPP
}
// sphAnglesBarCoord
Eigen::MatrixXd sphAnglesBarCoord(Eigen::ArrayXXd& sphPtsAngles, Eigen::MatrixXd& nodeMat, Eigen::ArrayXXi& triMat);
RcppExport SEXP _NSGP_sphAnglesBarCoord(SEXP sphPtsAnglesSEXP, SEXP nodeMatSEXP, SEXP triMatSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::ArrayXXd& >::type sphPtsAngles(sphPtsAnglesSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type nodeMat(nodeMatSEXP);
    Rcpp::traits::input_parameter< Eigen::ArrayXXi& >::type triMat(triMatSEXP);
    rcpp_result_gen = Rcpp::wrap(sphAnglesBarCoord(sphPtsAngles, nodeMat, triMat));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_NSGP_coefsChebApprox", (DL_FUNC) &_NSGP_coefsChebApprox, 5},
    {"_NSGP_prodChebDecompVec", (DL_FUNC) &_NSGP_prodChebDecompVec, 5},
    {"_NSGP_evalCheb", (DL_FUNC) &_NSGP_evalCheb, 4},
    {"_NSGP_evalChebDecompPts", (DL_FUNC) &_NSGP_evalChebDecompPts, 4},
    {"_NSGP_evalChebDecompMat", (DL_FUNC) &_NSGP_evalChebDecompMat, 4},
    {"_NSGP_matFEM2d", (DL_FUNC) &_NSGP_matFEM2d, 6},
    {"_NSGP_matFEM1d", (DL_FUNC) &_NSGP_matFEM1d, 6},
    {"_NSGP_triMetricCompute2d", (DL_FUNC) &_NSGP_triMetricCompute2d, 11},
    {"_NSGP_loglikelihood", (DL_FUNC) &_NSGP_loglikelihood, 10},
    {"_NSGP_KrigNodes", (DL_FUNC) &_NSGP_KrigNodes, 10},
    {"_NSGP_NCondSampleNodes", (DL_FUNC) &_NSGP_NCondSampleNodes, 9},
    {"_NSGP_CondSampleNodes", (DL_FUNC) &_NSGP_CondSampleNodes, 12},
    {"_NSGP_TPspline", (DL_FUNC) &_NSGP_TPspline, 5},
    {"_NSGP_evalTPSpline", (DL_FUNC) &_NSGP_evalTPSpline, 6},
    {"_NSGP_evalGradTPSpline", (DL_FUNC) &_NSGP_evalGradTPSpline, 6},
    {"_NSGP_matCovarTPS", (DL_FUNC) &_NSGP_matCovarTPS, 4},
    {"_NSGP_getTPSvalMat", (DL_FUNC) &_NSGP_getTPSvalMat, 4},
    {"_NSGP_argSort", (DL_FUNC) &_NSGP_argSort, 1},
    {"_NSGP_lgt", (DL_FUNC) &_NSGP_lgt, 3},
    {"_NSGP_lgtInv", (DL_FUNC) &_NSGP_lgtInv, 3},
    {"_NSGP_sphBarCoordBT", (DL_FUNC) &_NSGP_sphBarCoordBT, 4},
    {"_NSGP_BT", (DL_FUNC) &_NSGP_BT, 2},
    {"_NSGP_main", (DL_FUNC) &_NSGP_main, 0},
    {"_NSGP_simChebChol", (DL_FUNC) &_NSGP_simChebChol, 6},
    {"_NSGP_projectNoise", (DL_FUNC) &_NSGP_projectNoise, 4},
    {"_NSGP_maternCov", (DL_FUNC) &_NSGP_maternCov, 2},
    {"_NSGP_covMatMatern", (DL_FUNC) &_NSGP_covMatMatern, 3},
    {"_NSGP_loglikStat", (DL_FUNC) &_NSGP_loglikStat, 4},
    {"_NSGP_KrigStat", (DL_FUNC) &_NSGP_KrigStat, 5},
    {"_NSGP_KrigGaniso", (DL_FUNC) &_NSGP_KrigGaniso, 5},
    {"_NSGP_NCondSampleStat", (DL_FUNC) &_NSGP_NCondSampleStat, 3},
    {"_NSGP_CondSampleStat", (DL_FUNC) &_NSGP_CondSampleStat, 7},
    {"_NSGP_loglikGAniso", (DL_FUNC) &_NSGP_loglikGAniso, 4},
    {"_NSGP_logPostGAniso", (DL_FUNC) &_NSGP_logPostGAniso, 4},
    {"_NSGP_RW_MCMC", (DL_FUNC) &_NSGP_RW_MCMC, 7},
    {"_NSGP_rayTriangleIntersect", (DL_FUNC) &_NSGP_rayTriangleIntersect, 4},
    {"_NSGP_sphBarCoord", (DL_FUNC) &_NSGP_sphBarCoord, 3},
    {"_NSGP_sphBarCoordFast", (DL_FUNC) &_NSGP_sphBarCoordFast, 4},
    {"_NSGP_sphAnglesBarCoord", (DL_FUNC) &_NSGP_sphAnglesBarCoord, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_NSGP(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
